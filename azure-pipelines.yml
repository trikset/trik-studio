trigger:
  branches:
    include:
    - master
    - junior
  tags:
    include:
    - '*'

variables:
  CONFIG: release
  QMAKE_EXTRA: "CONFIG+=tests CONFIG+=noPch CONFIG+=ccache"
  EXECUTOR: "time docker exec -i builder"
  PROJECT: studio
  TESTS: true
  ALL_TESTS: "./run-simulator-tests.sh"
  TRIK_PYTHON3_VERSION_MINOR: 9
  TRIK_QT_VERSION: 5.12
  BUILD_TIMEOUT: 2400
  CCACHE_CONFIGPATH: "$(Pipeline.Workspace)/ccache.conf"
  CCACHE_DIR: "$(Pipeline.Workspace)/.ccache/$(Agent.OS)-$(CONFIG)"

parameters:
  - name: checkoutStep
    type: step
    default:
      checkout: self
      fetchDepth: 100
      submodules: recursive

  - name: gitListStep
    type: step
    default:
      bash: |
        git tag -l
        git branch -a
      displayName: Set up the environment

  - name: environmentStep
    type: step
    default:
      bash: buildScripts/azure/install_$(Agent.OS).sh
      displayName: Set up the environment

  - name: cacheStep
    type: step
    default:
      task: Cache@2
      inputs:
        key: '"ccache-$(Agent.OS)-$(CONFIG)" | "$(Build.SourceVersion)" | "$(QMAKE_EXTRA)"'
        path: $(CCACHE_DIR)
        restoreKeys: |
          "ccache-$(Agent.OS)-$(CONFIG)" | "$(Build.SourceVersion)" | "$(QMAKE_EXTRA)"
          "ccache-$(Agent.OS)-$(CONFIG)" | "$(Build.SourceVersion)"
          "ccache-$(Agent.OS)-$(CONFIG)" | "$(QMAKE_EXTRA)"
          "ccache-$(Agent.OS)-$(CONFIG)"
      displayName: Process caches

  - name: buildNoTestsStep
    type: step
    default:
      bash: |
        buildScripts/azure/build.sh & WPID=$!
        sleep $BUILD_TIMEOUT && {  echo -e "\033[31;1;7m***KILLED ON TIMEOUT***\033[0m" ; echo "##vso[task.setvariable variable=isTimeout;isOutput=true]Yes" ; pkill -TERM -P $WPID ; } & KPID=$!
        wait $WPID ; kill $KPID > /dev/null || true
      displayName: 'Build without tests'

  - name: buildWithTestsStep
    type: step
    default:
      bash: buildScripts/azure/build.sh
      displayName: 'Build with buildWithTests.sh'

  - name: buildInstallerStep
    type: step
    default:
      bash: $EXECUTOR env CONFIG=$CONFIG AGENT_OS=$(Agent.OS) ./buildScripts/azure/test.sh && buildScripts/azure/build_installer.sh
      env:
        password: $(SERVER_PASSWORD)
        server: $(SERVER_NAME)
      displayName: 'Build installer and deploy'

  - name: setTagNameStep
    type: step
    default:
      bash: export BRANCH_NAME="$(git describe --exact-match $(Build.SourceVersion))"
      condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')
      displayName:  'Tag name as an environment variable'

  - name: publishInstallerArtifact
    type: step
    default:
      publish: installer/
      artifact: "$(Agent.OS) installer"

stages:
- stage: lintStage
  displayName: Lint stage
  jobs:
  - job: Lint
    pool:
      vmImage: ubuntu-latest

    steps:
    - ${{ parameters.checkoutStep }}

    - bash: buildScripts/azure/install_$(Agent.OS).sh
      displayName: 'Set up the environment'

    - bash: $EXECUTOR buildScripts/azure/vera_translation.sh
      displayName: 'vera_translation.sh'

- stage: linuxCacheableBuildStage
  displayName: Linux cache build
  dependsOn: lintStage
  condition: succeeded()
  jobs:
  - job: Build
    strategy:
      matrix:
        LinuxRelease:
          imageName: 'ubuntu-latest'
          QMAKE_EXTRA: "CONFIG+=noPch CONFIG+=ccache CONFIG+=no-sanitizers CONFIG+=silent CONFIG+=warn_off"
        LinuxDebug:
          imageName: 'ubuntu-latest'
          QMAKE_EXTRA: "CONFIG+=noPch CONFIG+=ccache CONFIG+=silent CONFIG+=small_debug_info CONFIG+=sanitizer CONFIG+=sanitize_undefined CONFIG+=sanitize_address"
          CONFIG: debug
          TESTS: $ALL_TESTS
    pool:
      vmImage: $(imageName)

    steps:
    - ${{ parameters.checkoutStep }}
    - ${{ parameters.environmentStep }}
    - ${{ parameters.cacheStep }}
    - ${{ parameters.buildNoTestsStep }}

- stage: macOSCacheableBuildStage
  displayName: MacOS cache build
  dependsOn: lintStage
  condition: succeeded()
  jobs:
  - job: Build
    strategy:
      matrix:
        macOSRelease:
          imageName: 'macOS-11'
          QMAKE_EXTRA: "CONFIG+=noPch CONFIG+=ccache CONFIG+=no-sanitizers CONFIG+=silent CONFIG+=warn_off"
          EXECUTOR: "time"
        macOSDebug:
          imageName: 'macOS-11'
          QMAKE_EXTRA: "CONFIG+=noPch CONFIG+=ccache CONFIG+=silent CONFIG+=small_debug_info CONFIG+=sanitizer CONFIG+=sanitize_undefined CONFIG+=sanitize_address"
          CONFIG: debug
          TESTS: $ALL_TESTS
          EXECUTOR: "time"
    pool:
      vmImage: $(imageName)

    steps:
    - ${{ parameters.checkoutStep }}
    - ${{ parameters.environmentStep }}
    - ${{ parameters.cacheStep }}
    - ${{ parameters.buildNoTestsStep }}

- stage: linuxBuildWithTestsStage
  displayName: Linux build with tests
  dependsOn: linuxCacheableBuildStage
  condition: and(succeeded(),and(ne(stageDependencies.linuxCacheableBuildStage.Build.outputs['LinuxRelease.BuildNoTestsStep.isTimeout'],'Yes'),ne(stageDependencies.linuxCacheableBuildStage.Build.outputs['LinuxDebug.BuildNoTestsStep.isTimeout'],'Yes')))
  jobs:
  - job: Build
    strategy:
      matrix:
        Linux release + tests:
          imageName: 'ubuntu-latest'
          QMAKE_EXTRA: "CONFIG+=tests CONFIG+=noPch CONFIG+=ccache CONFIG+=no-sanitizers CONFIG+=silent CONFIG+=warn_off"
        Linux release with retired features:
          imageName: 'ubuntu-latest'
          QMAKE_EXTRA: "CONFIG+=trik_retired_features CONFIG+=noPch CONFIG+=ccache CONFIG+=no-sanitizers CONFIG+=silent"
        Linux debug + tests:
          imageName: 'ubuntu-latest'
          QMAKE_EXTRA: "CONFIG+=tests CONFIG+=noPch CONFIG+=ccache CONFIG+=silent CONFIG+=small_debug_info CONFIG+=sanitizer CONFIG+=sanitize_undefined CONFIG+=sanitize_address"
          CONFIG: debug
          TESTS: $ALL_TESTS
    pool:
      vmImage: $(imageName)

    steps:
    - ${{ parameters.checkoutStep }}
    - ${{ parameters.environmentStep }}
    - ${{ parameters.cacheStep }}
    - ${{ parameters.buildWithTestsStep }}

- stage: macOSBuildWithTestsStage
  displayName: MacOs build with tests
  dependsOn: macOSCacheableBuildStage
  condition: and(succeeded(),and(ne(stageDependencies.macOSCacheableBuildStage.Build.outputs['macOSRelease.BuildNoTestsStep.isTimeout'],'Yes'),ne(stageDependencies.macOSCacheableBuildStage.Build.outputs['macOSDebug.BuildNoTestsStep.isTimeout'],'Yes')))
  jobs:
  - job: Build
    strategy:
      matrix:
        MacOS release + tests:
          imageName: 'macOS-11'
          QMAKE_EXTRA: "CONFIG+=tests CONFIG+=noPch CONFIG+=ccache CONFIG+=no-sanitizers CONFIG+=silent CONFIG+=warn_off"
          EXECUTOR: "time"
        macOS debug + tests:
          imageName: 'macOS-11'
          QMAKE_EXTRA: "CONFIG+=tests CONFIG+=noPch CONFIG+=ccache CONFIG+=silent CONFIG+=small_debug_info CONFIG+=sanitizer CONFIG+=sanitize_undefined CONFIG+=sanitize_address"
          CONFIG: debug
          TESTS: $ALL_TESTS
          EXECUTOR: "time"
    pool:
      vmImage: $(imageName)

    steps:
    - ${{ parameters.checkoutStep }}
    - ${{ parameters.environmentStep }}
    - ${{ parameters.cacheStep }}
    - ${{ parameters.buildWithTestsStep }}

- stage: linuxInstallerStage
  displayName: Linux installer
  dependsOn: linuxBuildWithTestsStage
  condition: succeeded()
  jobs:
  - job: installer
    displayName: "Test, installer, deploy"
    variables:
      QMAKE_EXTRA: "CONFIG+=noPch CONFIG+=ccache CONFIG+=no-sanitizers CONFIG+=silent CONFIG+=warn_off"
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - ${{ parameters.checkoutStep }}
    - ${{ parameters.environmentStep }}
    - ${{ parameters.cacheStep }}
    - ${{ parameters.buildNoTestsStep }}
    - ${{ parameters.setTagNameStep }}
    - ${{ parameters.buildInstallerStep }}
    - ${{ parameters.publishInstallerArtifact }}

- stage: macOsInstallerStage
  displayName: MacOs installer
  dependsOn: macOSBuildWithTestsStage
  condition: succeeded()
  jobs:
  - job: installer
    displayName: "Test, installer, deploy"
    variables:
      QMAKE_EXTRA: "CONFIG+=noPch CONFIG+=ccache CONFIG+=no-sanitizers CONFIG+=silent CONFIG+=warn_off"
      EXECUTOR: "time"
    pool:
      vmImage: 'macOS-11'

    steps:
    - ${{ parameters.checkoutStep }}
    - ${{ parameters.environmentStep }}
    - ${{ parameters.cacheStep }}
    - ${{ parameters.buildNoTestsStep }}
    - ${{ parameters.setTagNameStep }}
    - ${{ parameters.buildInstallerStep }}
    - ${{ parameters.publishInstallerArtifact }}
