trigger:
- main

variables:
  CONFIG: release
  QMAKE_EXTRA: "CONFIG+=tests CONFIG+=noPch CONFIG+=ccache"
  EXECUTOR: "time docker exec -i builder"
  PROJECT: studio
  TESTS: true
  ALL_TESTS: "./run-simulator-tests.sh"
  BUILD_TIMEOUT: 2800
  CCACHE_CONFIGPATH: "$(Pipeline.Workspace)/ccache.conf"

stages:
- stage: LintStage
  jobs:
  - job: Lint
    pool:
      vmImage: ubuntu-latest

    steps:
    - checkout: self
      fetchDepth: 1
      submodules: recursive

    - bash: buildScripts/azure/install_$(Agent.OS).sh
      displayName: 'Set up the environment'

    - bash: $EXECUTOR buildScripts/azure/vera_translation.sh
      displayName: 'vera_translation.sh'

- stage: CacheableBuildStage
  dependsOn: LintStage
  condition: succeeded()
  jobs:
  - job: Build
    strategy:
      matrix:
        linux-release:
          displayName: Linux release
          imageName: 'ubuntu-latest'
          QMAKE_EXTRA: "CONFIG+=noPch CONFIG+=ccache CONFIG+=no-sanitizers CONFIG+=silent CONFIG+=warn_off"
        linux-debug:
          displayName: Linux debug
          imageName: 'ubuntu-latest'
          QMAKE_EXTRA: "CONFIG+=noPch CONFIG+=ccache CONFIG+=silent CONFIG+=small_debug_info CONFIG+=sanitizer CONFIG+=sanitize_undefined CONFIG+=sanitize_address"
          CONFIG: debug
          TESTS: $ALL_TESTS
        macOS-release:
          displayName: macOS release
          imageName: 'macOS-latest'
          QMAKE_EXTRA: "CONFIG+=noPch CONFIG+=ccache CONFIG+=no-sanitizers CONFIG+=silent CONFIG+=warn_off"
          EXECUTOR: "time"
        macOS-debug:
          displayName: macOS debug
          imageName: 'macOS-latest'
          QMAKE_EXTRA: "CONFIG+=noPch CONFIG+=ccache CONFIG+=silent CONFIG+=small_debug_info CONFIG+=sanitizer CONFIG+=sanitize_undefined CONFIG+=sanitize_address"
          CONFIG: debug
          TESTS: $ALL_TESTS
          EXECUTOR: "time"

    pool:
      vmImage: $(imageName)
    variables:
      CCACHE_DIR: "$(Pipeline.Workspace)/.ccache/$(Agent.OS)-$(CONFIG)"

    steps:
    - checkout: self
      fetchDepth: 1
      submodules: recursive

    - bash: |
        sudo apt-get install ccache -y
        echo "##vso[task.prependpath]/usr/lib/ccache"
        buildScripts/azure/install_$(Agent.OS).sh
      displayName: Set up the environment
    - task: Cache@2
      inputs:
        key: '"ccache-$(Agent.OS)-$(CONFIG)" | "$(Agent.OS)-$(CONFIG)-$(Build.SourceVersion)"'
        path: $(CCACHE_DIR)
      displayName: Cache azure task

    - bash: |
        buildScripts/azure/buildNoTests.sh & WPID=$!
        sleep $BUILD_TIMEOUT && { kill $WPID || true ; echo "***KILLED ON TIMEOUT***" ; } & KPID=$!
        wait $WPID ; RES=$?; kill -0 $KPID && kill $KPID > /dev/null || true ;
      displayName: 'Build with buildNoTests.sh'

- stage: BuildWithTestStage
  dependsOn: CacheableBuildStage
  condition: succeeded()
  jobs:
  - job: Build
    strategy:
      matrix:
        linux-release:
          displayName: Linux release
          imageName: 'ubuntu-latest'
          QMAKE_EXTRA: "CONFIG+=tests CONFIG+=noPch CONFIG+=ccache CONFIG+=no-sanitizers CONFIG+=silent CONFIG+=warn_off"
        linux-debug:
          displayName: Linux debug
          imageName: 'ubuntu-latest'
          QMAKE_EXTRA: "CONFIG+=tests CONFIG+=noPch CONFIG+=ccache CONFIG+=silent CONFIG+=small_debug_info CONFIG+=sanitizer CONFIG+=sanitize_undefined CONFIG+=sanitize_address"
          CONFIG: debug
          TESTS: $ALL_TESTS
        macOS-release:
          displayName: macOS release + tests
          imageName: 'macOS-latest'
          QMAKE_EXTRA: "CONFIG+=tests CONFIG+=noPch CONFIG+=ccache CONFIG+=no-sanitizers"
          EXECUTOR: "time"
        macOS-debug:
          displayName: macOS debug + tests
          imageName: 'macOS-latest'
          QMAKE_EXTRA: "CONFIG+=tests CONFIG+=noPch CONFIG+=ccache CONFIG+=silent CONFIG+=small_debug_info CONFIG+=sanitizer CONFIG+=sanitize_undefined CONFIG+=sanitize_address"
          CONFIG: debug
          TESTS: $ALL_TESTS
          EXECUTOR: "time"

    pool:
      vmImage: $(imageName)
    variables:
      CCACHE_DIR: "$(Pipeline.Workspace)/.ccache/$(Agent.OS)-$(CONFIG)"

    steps:
    - checkout: self
      fetchDepth: 1
      submodules: recursive

    - bash: |
        sudo apt-get install ccache -y
        echo "##vso[task.prependpath]/usr/lib/ccache"
        buildScripts/azure/install_$(Agent.OS).sh
      displayName: Set up the environment

    - task: Cache@2
      inputs:
        key: '"ccache-$(Agent.OS)-$(CONFIG)" | "$(Agent.OS)-$(CONFIG)-$(Build.SourceVersion)"'
        path: $(CCACHE_DIR)
      displayName: Cache azure task

    - bash: buildScripts/azure/buildWithTests.sh
      displayName: 'Build with buildWithTests.sh'

- stage: InstallerStage
  dependsOn: BuildWithTestStage
  condition: succeeded()
  jobs:
  - job: installer
    strategy:
      matrix:
        linux-release:
          displayName: Linux release
          imageName: 'ubuntu-latest'
          QMAKE_EXTRA: "CONFIG+=noPch CONFIG+=ccache CONFIG+=no-sanitizers CONFIG+=silent CONFIG+=warn_off"
        macOS-release:
          displayName: MacOS release
          imageName: 'macOS-latest'
          QMAKE_EXTRA: "CONFIG+=noPch CONFIG+=ccache CONFIG+=no-sanitizers"
          EXECUTOR: "time"

    variables:
      CCACHE_DIR: "$(Pipeline.Workspace)/.ccache/$(Agent.OS)-$(CONFIG)"
    pool:
      vmImage: $(imageName)

    steps:
    - checkout: self
      fetchDepth: 1
      submodules: recursive

    - bash: |
        sudo apt-get install ccache -y
        echo "##vso[task.prependpath]/usr/lib/ccache"
        buildScripts/azure/install_$(Agent.OS).sh
      displayName: Set up the environment

    - task: Cache@2
      inputs:
        key: '"ccache-$(Agent.OS)-$(CONFIG)" | "$(Agent.OS)-$(CONFIG)-$(Build.SourceVersion)"'
        path: $(CCACHE_DIR)
      displayName: Cache azure task

    - bash: buildScripts/azure/buildNoTests.sh
      displayName: 'Build with buildNoTests.sh'

    - bash: $EXECUTOR env CONFIG=$CONFIG ./buildScripts/azure/test.sh && buildScripts/azure/build_installer.sh
      displayName: 'Build installer and deploy'
